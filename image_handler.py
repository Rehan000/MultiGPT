import base64
from llama_cpp import Llama
from llama_cpp.llama_chat_format import Llava15ChatHandler

def convert_bytes_to_base64(image_bytes):
    """
        Converts image bytes to a base64-encoded string.

        This function takes an image in byte format, encodes it in base64, and formats it as a
        data URL.

        Args:
            image_bytes (bytes): The image data in byte format.

        Returns:
            str: A base64-encoded string of the image data prefixed with "data:image/jpeg;base64,"
                 for direct use in HTML image elements.
    """
    encoded_string = base64.b64encode(image_bytes).decode("utf-8")
    return "data:image/jpeg;base64," + encoded_string

def handle_image(image_bytes, user_message):
    """
        Handles image processing and text interaction using a language model.

        This function takes an image in byte format and a user message, processes the image
        to generate a base64-encoded string for use in a chat-based language model (LLM).
        The function sets up the LLM with a specified model and handler, uses the image
        and user message to create a chat completion, and returns the model's response.

        Args:
            image_bytes (bytes): The image data in byte format.
            user_message (str): A text message from the user that accompanies the image.

        Returns:
            str: The content of the response generated by the language model after processing
                 the image and user message.
    """
    chat_handler = Llava15ChatHandler(clip_model_path="./models/llava/mmproj-model-f16.gguf")
    llm = Llama(
      model_path="./models/llava/ggml-model-q5_k.gguf",
      chat_handler=chat_handler,
      logits_all=True,
      n_ctx=2048, # n_ctx should be increased to accommodate the image embedding
    )
    image_base64 = convert_bytes_to_base64(image_bytes)
    output = llm.create_chat_completion(
        messages = [
            {"role": "system", "content": "You are an assistant who perfectly describes images."},
            {
                "role": "user",
                "content": [
                    {"type" : "text", "text": user_message},
                    {"type": "image_url", "image_url": {"url": image_base64 } }
                ]
            }
        ]
    )

    return output["choices"][0]["message"]["content"]